using System;
using Microsoft.MetadirectoryServices;
using System.Xml;
using System.Diagnostics;
using System.Collections;

namespace Mms_ManagementAgent_StagingAreaDatabaseMAExtension
{
    /// <summary>
    /// Extension for SAD MA. Trims the all teh values of SAD data and maps for flow.
    /// </summary>
    public class MAExtensionObject : IMASynchronization
    {
        XmlNode rnode;
        XmlNode node;
        string publicOu, domain, upn, etypeNodeValue, sipHomeServer, toggledisplayname, emailtemplate, loginscript; //Release 5 -  added 2 new variables emailtemplate, loginscript
        Hashtable afvalhash;
        string workerOu = "";

        public MAExtensionObject()
        {
            //
            // TODO: Add constructor logic here
            //
        }
        void IMASynchronization.Initialize()
        {
            //
            // Initialize config details from xml file
            //
            try
            {
                const string XML_CONFIG_FILE = @"\rules-config.xml";
                XmlDocument config = new XmlDocument();
                string dir = Utils.ExtensionsDirectory;
                config.Load(dir + XML_CONFIG_FILE);

                rnode = config.SelectSingleNode("rules-extension-properties");
                node = rnode.SelectSingleNode("environment");
                string env = node.InnerText;
                rnode = config.SelectSingleNode
                    ("rules-extension-properties/management-agents/" + env + "/ad-ma");
                XmlNode confignode = rnode.SelectSingleNode("siteconfigfile");
                afvalhash = LoadAFConfig(confignode.InnerText);
                //get the Users to be considered from config                       
                node = rnode.SelectSingleNode("provision");
                etypeNodeValue = node.InnerText.ToUpper();
                //get the Users to be excluded from setting LillyCollab tag in displayname
                node = rnode.SelectSingleNode("toggledisplayname");
                toggledisplayname = node.InnerText.ToUpper();

                rnode = config.SelectSingleNode
                    ("rules-extension-properties/management-agents/" + env + "/eds-ma");
                node = rnode.SelectSingleNode("/eds-ma");
                //node = rnode.SelectSingleNode("accountou");
                //accountOu = node.InnerText;
                node = rnode.SelectSingleNode("workerou");
                workerOu = node.InnerText;
            }
            catch (NullReferenceException nre)
            {
                // If a tag does not exist in the xml, then the stopped-extension-dll 
                // error will be thrown.
                throw nre;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        void IMASynchronization.Terminate()
        {
            //
            // TODO: write termination code
            //
        }

        bool IMASynchronization.ShouldProjectToMV(CSEntry csentry, out string MVObjectType)
        {
            //
            // TODO: Remove this throw statement if you implement this method
            //
            throw new EntryPointNotImplementedException();
        }

        DeprovisionAction IMASynchronization.Deprovision(CSEntry csentry)
        {
            //
            // TODO: Remove this throw statement if you implement this method
            //
            throw new EntryPointNotImplementedException();
        }

        bool IMASynchronization.FilterForDisconnection(CSEntry csentry)
        {
            //
            // TODO: write connector filter code
            //
            throw new EntryPointNotImplementedException();
        }

        void IMASynchronization.MapAttributesForJoin(string FlowRuleName, CSEntry csentry, ref ValueCollection values)
        {
            //
            // TODO: write join mapping code
            //
            throw new EntryPointNotImplementedException();
        }

        bool IMASynchronization.ResolveJoinSearch(string joinCriteriaName, CSEntry csentry, MVEntry[] rgmventry, out int imventry, ref string MVObjectType)
        {
            //
            // TODO: write join resolution code
            //
            throw new EntryPointNotImplementedException();
        }

        void IMASynchronization.MapAttributesForImport(string FlowRuleName, CSEntry csentry, MVEntry mventry)
        {
            ///
            ///Import attribute flow.
            ///

            string sSource, sLog, sEvent;

            switch (FlowRuleName)
            {

                case "cd.person:EMPLY_GRP_CD,FRST_NM,LST_NM,MDL_NM,PRSNL_NBR->mv.person:displayName":
                    //Displayname constructed and appeneded with " - LillyCollab" if the users are collab
                    //R3 - Use complete list of exclusion from config file, also manages null & appends LillyCollab for null emply_grp_cd
                    //Not deleted, if value is emplty - instead error thrown
                    string displayname = "";
                    if (csentry["FRST_NM"].IsPresent)
                        displayname = csentry["FRST_NM"].Value;
                    if (csentry["MDL_NM"].IsPresent)
                        displayname = displayname.Trim() + " " + csentry["MDL_NM"].Value;
                    if (csentry["LST_NM"].IsPresent)
                        displayname = displayname.Trim() + " " + csentry["LST_NM"].Value;
                    if (csentry["EMPLY_GRP_CD"].IsPresent
                        && !toggledisplayname.Contains(csentry["EMPLY_GRP_CD"].Value.ToUpper()))
                    {
                        displayname = displayname.Trim() + @" - LillyCollab";
                    }
                    else if (!csentry["EMPLY_GRP_CD"].IsPresent)
                    {
                        displayname = displayname.Trim() + @" - LillyCollab";
                    }

                    if (!displayname.Trim().Equals(""))
                    {
                        mventry["displayName"].Value = displayname.Trim();
                    }
                    else
                    {
                        mventry["displayName"].Delete();
                        //Write to the Event log for displayname is empty
                        sSource = "SAD MA";
                        sLog = "Application";
                        sEvent = csentry["PRSNL_NBR"].Value + " - Displayname is null";

                        if (!EventLog.SourceExists(sSource))
                            EventLog.CreateEventSource(sSource, sLog);

                        EventLog.WriteEntry(sSource, sEvent, EventLogEntryType.Error, 8102);
                    }
                    break;

                case "cd.person:ANGLCZD_FIRST_NM,ANGLCZD_LAST_NM,ANGLCZD_MDL_NM,FRST_NM,LST_NM,MDL_NM,PRSNL_NBR->mv.person:cn":
                    //Construct Unique CN and change it to upper case before setting to MV
                    //Constructing Unique CN 
                    //Delete if CN null - But CN cannot be null
                    //and Write to Event log for CN null is in the ConstructUniqueCommonName() method
                    string uCN = ConstructUniqueCommonName(csentry, mventry);
                    if (!uCN.Equals(""))
                    {
                        mventry["cn"].Value = uCN.ToUpper().Trim();
                    }
                    else
                    {
                        mventry["cn"].Delete();
                    }
                    break;

                case "cd.person:CNTRY_CD_NBR->mv.person:countryCode":
                    //Code to convert the string to integer, 
                    //Not deleted - SAD SLA will gaurentee that the Values will there either 0 or the country code
                    mventry["countryCode"].IntegerValue = Convert.ToInt32(csentry["CNTRY_CD_NBR"].Value);
                    break;

                case "cd.person:PRSNL_NBR->mv.person:initPassword":
                    //Initpassword set for all users only System Id changed and password not already present
                    //Not deleted - since logically this will execute only once during inital MV object creation
                    if (!mventry["initPassword"].IsPresent)
                        mventry["initPassword"].Value = RandomPassword.Generate(8, 10);
                     break;
                   

                case "cd.person:EMPLY_GRP_CD,PRSNL_AREA_CD,PRSNL_NBR->mv.person:domain":
                    //domain info set for the user translated out of XML file
                    //Delete if value is null
                    //PRSNL_NBR is added to trigger the code in case the original attribute value is null
                    if (csentry["PRSNL_AREA_CD"].IsPresent && csentry["EMPLY_GRP_CD"].IsPresent)
                    {
                        //XML Method to get the values
                        setUserVariables(csentry["PRSNL_AREA_CD"].Value, csentry["EMPLY_GRP_CD"].Value);
                        string tempdomain = domain;
                        
                        if ((tempdomain == null) || (tempdomain.ToString().Trim().Length == 0)) //TT09431320 - When domain is empty string it should be deleted from Metaverse
                        {
                            //Don't do anything just delete metaverse entry 
                            mventry["domain"].Delete();
                            break;
                        }
                        else if (tempdomain != null)
                        {
                            mventry["domain"].Value = tempdomain;
                        }
                        else
                        {
                            //This code has been copied from MIIS AF-ADMA Provisioning, as the error was not getting logged in event viewer there
                            //TT08560153
                                 //string ExceptionMessage = mventry["employeeID"].Value
                                   string ExceptionMessage = csentry["PRSNL_NBR"].Value
                                        + " - PACCODE and EMPLOYEETYPE combination cannot retrieve data from XML file";
                                    sSource = "SAD MA";
                                    sLog = "Application";
                                    sEvent = ExceptionMessage;

                                    if (!EventLog.SourceExists(sSource))
                                        EventLog.CreateEventSource(sSource, sLog);

                                    EventLog.WriteEntry(sSource, sEvent, EventLogEntryType.Error, 8031);
                                    // If a tag does not exist in the xml, then the stopped-extension-dll 
                                    // error will be thrown.
                                    mventry["domain"].Delete();
                                    break; 
                        }
                    }
                    break;

                case "cd.person:EMPLY_GRP_CD,INTERNET_STYLE_ADRS,PRSNL_NBR,SYSTEM_ID->mv.person:msRTCSIP-PrimaryUserAddress":
                    //LCS attribute
                    //Deleted - msRTCSIP-PrimaryUserAddress is deleted if INTERNET_STYLE_ADRS isn't present
                    //INTERNET_STYLE_ADRS with lilly.com created SIP address
                    //SAD will provice @lilly.com
                    //PRSNL_NBR is added to trigger the code in case the original attribute value is null
                    //"Z" is hardcoded since this a pointed requirement
                    if (csentry["EMPLY_GRP_CD"].IsPresent
                        && csentry["EMPLY_GRP_CD"].Value.ToUpper().Equals("Z"))
                    {
                        //Create SIP for Collaborators 
                        if(csentry["SYSTEM_ID"].IsPresent)//this check has been added in R4 to avoid DLL error on console
                        mventry["msRTCSIP-PrimaryUserAddress"].Value = @"sip:" + csentry["SYSTEM_ID"].Value + "@LILLY.COM";
                    }
                    else if (csentry["INTERNET_STYLE_ADRS"].IsPresent
                        && csentry["INTERNET_STYLE_ADRS"].Value.ToLower().Contains("@lilly.com"))
                    {
                        //Create SIP for Collaborators or Lilly users with only Lilly email address
                        mventry["msRTCSIP-PrimaryUserAddress"].Value = @"sip:" + csentry["INTERNET_STYLE_ADRS"].Value;
                    }
                    else
                    {
                        mventry["msRTCSIP-PrimaryUserAddress"].Delete();
                    }
                    break;

                case "cd.person:EMPLY_GRP_CD,PRSNL_AREA_CD,PRSNL_NBR->mv.person:msRTCSIP-PrimaryHomeServer":
                    //LCS Attribute - cannot be direct flow since it changes between environments (DEV, QA or Prod)
                    //Not deleted - value from config file, will throw an ddl error if the config file or any value is null          
                    //XML Method to get the values
                    setUserVariables(csentry["PRSNL_AREA_CD"].Value, csentry["EMPLY_GRP_CD"].Value);
                    string tempsipHomeServer = sipHomeServer;
                    mventry["msRTCSIP-PrimaryHomeServer"].Value = tempsipHomeServer;
                    break;

                case "cd.person:EMPLY_GRP_CD,INTERNET_STYLE_ADRS,PRSNL_NBR,SYSTEM_ID->mv.person:proxyAddresses":
                    //Set up proxy by emptying the multivalued attribute and re-populating it
                    //Delete is accomplished through .Clear() if values are empty
                    //PRSNL_NBR is added to trigger the code in case the original attribute value is null
                    // Clear the sip: entry - Create an empty string value collection
                    ValueCollection finalValues = Utils.ValueCollection("initialValue");
                    finalValues.Clear();

                    foreach (Value addrElement in mventry["proxyAddresses"].Values)
                    {
                        if (!addrElement.ToString().ToLower().StartsWith("sip:"))
                        {
                            finalValues.Add(addrElement);
                        }
                    }

                    mventry["proxyAddresses"].Values = finalValues;
                    //"Z" is hardcoded since this a pointed requirement
                    if (csentry["EMPLY_GRP_CD"].IsPresent
                        && csentry["EMPLY_GRP_CD"].Value.ToUpper().Equals("Z"))
                    {
                        //Create SIP for Collaborators
                        if (csentry["SYSTEM_ID"].IsPresent)//this check has been added in R4 to avoid DLL error on console
                        mventry["proxyAddresses"].Value = @"sip:" + csentry["SYSTEM_ID"].Value + "@LILLY.COM";
                    }
                    else if (csentry["INTERNET_STYLE_ADRS"].IsPresent
                        && csentry["INTERNET_STYLE_ADRS"].Value.ToLower().Contains("@lilly.com"))
                    {
                        //Create SIP for Collaborators or Lilly users with only Lilly email address
                        mventry["proxyAddresses"].Value = @"sip:" + csentry["INTERNET_STYLE_ADRS"].Value;
                    }
                    break;
                
               
                case "cd.person:PRSNL_NBR->mv.person:EDSWorkerDN":
                    //Build EDSWorkerDN                 
                    mventry["EDSWorkerDN"].Value = "employeenumber=" + csentry["PRSNL_NBR"].Value.Trim() + "," + workerOu;
                    break;

                case "cd.person:FRST_NM,LST_NM,MDL_NM,PRSNL_NBR->mv.person:EDScn":
                    //Build EDScn
                    string cn = "";
                    if (csentry["FRST_NM"].IsPresent)
                        cn = csentry["FRST_NM"].Value;
                    if (csentry["MDL_NM"].IsPresent)
                        cn = cn.Trim() + " " + csentry["MDL_NM"].Value;
                    if (csentry["LST_NM"].IsPresent)
                        cn = cn.Trim() + " " + csentry["LST_NM"].Value;

                    if (!cn.Trim().Equals(""))
                    {
                        mventry["EDScn"].Value = cn.Trim();
                    }
                    break;

                case "cd.person:SUPERVISOR_FLG->mv.person:EDS_Supervisor_flag":
                    if (csentry["SUPERVISOR_FLG"].Value == "0")
                        mventry["EDS_Supervisor_flag"].Value = "N";
                    else if (csentry["SUPERVISOR_FLG"].Value == "1")
                        mventry["EDS_Supervisor_flag"].Value = "Y";
                    break;

                //This attribute flow is for Password dissimination functionality , lilly contact email address is passed in Notification table 
                case "cd.person:LY_CONTACT_PRSNL_NBR->mv.person:lly_cntct_email_adrs":
                    string strLlyCnctAddr = GetEmailAddressFromID(mventry, csentry["LY_CONTACT_PRSNL_NBR"].Value);
                    if (strLlyCnctAddr == "")
                    {
                        mventry["lly_cntct_email_adrs"].Delete();
                    }
                    else
                    {
                        mventry["lly_cntct_email_adrs"].Value = strLlyCnctAddr;
                    }
                    break;
                //This attribute flow is for Password dissimination functionality , supervisor email address  is passed in Notification table     
                case "cd.person:SUPERVISOR_PRSNL_NBR->mv.person:lly_sprvsr_email_adrs":
                    string strSprvsrAddr =  GetEmailAddressFromID(mventry, csentry["SUPERVISOR_PRSNL_NBR"].Value);
                    if (strSprvsrAddr == "")
                    {
                        mventry["lly_sprvsr_email_adrs"].Delete();
                    }
                    else
                    {
                        mventry["lly_sprvsr_email_adrs"].Value = strSprvsrAddr;
                    }
                    break;
                //This attribute flow is for Contractor End date notification functionality ,lilly sponser email address  is passed in Notification table     
                case "cd.person:LY_CONTACT_PRSNL_NBR->mv.person:spnsr_email_adrs":
                    string strSpnsrAddr = GetEmailAddressFromID(mventry, csentry["LY_CONTACT_PRSNL_NBR"].Value);
                    if (strSpnsrAddr == "")
                    {
                        mventry["spnsr_email_adrs"].Delete();
                    }
                    else
                    {
                        mventry["spnsr_email_adrs"].Value = strSpnsrAddr;
                    }
                    break;
                //This attribute flow is for Contractor End date notification functionality ,lilly sponser name  is passed in Notification table     
                case "cd.person:LY_CONTACT_PRSNL_NBR->mv.person:spnsr_nm":
                    string strSprvsrNm = GetNameFromID(mventry, csentry["LY_CONTACT_PRSNL_NBR"].Value);
                    if (strSprvsrNm == "")
                    {
                        mventry["spnsr_nm"].Delete();
                    }
                    else
                    {
                        mventry["spnsr_nm"].Value = strSprvsrNm;
                    }
                    break;

                //This attribute flow is for Password dissimination functionality , emailTemplate from Environment config file  is passed to Notification table     
                case "cd.person:PRSNL_NBR->mv.person:emailTemplate":
                    if (emailtemplate.ToString().Trim().Length > 0)
                        mventry["emailTemplate"].Value = emailtemplate; 
                    break;

                //This attribute flow is for notification and reporting functionality ,today's date  is passed to metaverse     
                case "cd.person:PRSNL_NBR->mv.person:SADMVCreate_dt":
                    if (!(mventry["SADMVCreate_dt"].IsPresent ))
                    {
                        mventry["SADMVCreate_dt"].Value = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") ;
                    }
                    break;

                //This attribute flow is for notification and reporting functionality , today's date  is passed to MIIS create date in Notification table
                //When we have system ID populated in MIIS , MIIS create date will be inserted in Notification table
                case "cd.person:SYSTEM_ID->mv.person:SADSysIDCreate_dt": 
                    if (!(mventry["SADSysIDCreate_dt"].IsPresent))
                    {
                        mventry["SADSysIDCreate_dt"].Value = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    }
                    break;
                
                //Update the MIIS Modification date for a record

                case "cd.person:CNTRY_CD,EMPLY_GRP_CD,EMPLY_SUB_GRP_CD,PRSNL_NBR,STATUS_CD,SYSTEM_ID->mv.person:miis_mod_dt":
                {
                    mventry["miis_mod_dt"].Value = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"); //Stores Updated Modification date
                }
                break;
           
                default:
                    throw new EntryPointNotImplementedException();
            }
        }

        void IMASynchronization.MapAttributesForExport(string FlowRuleName, MVEntry mventry, CSEntry csentry)
        {
            //
            // TODO: write your export attribute flow code
            //
            throw new EntryPointNotImplementedException();
        }

        //Release 5 Lilac - The function takes personal number as an input and returns the email address
        // Data is being retrived from Metaverse
        public string GetEmailAddressFromID(MVEntry mventry, string strPrsnlID)
        {
            MVEntry[] findResultList = null;
            findResultList = Utils.FindMVEntries("employeeID", strPrsnlID);
            string strReturnValue = "";
            if (findResultList.Length == 0) // display name never used, so take this one
            {
                strReturnValue = "";
            }
            else if (findResultList.Length == 1) // If a metaverse entry is found with the specified commonName, check if this is the entry that is being processed
            {
                MVEntry mvEntryFound = findResultList[0];
                strReturnValue = mvEntryFound["mail"].Value;
            }
            return strReturnValue;
        }

        public string GetNameFromID(MVEntry mventry, string strPrsnlID)
        {
            MVEntry[] findResultList = null;
            findResultList = Utils.FindMVEntries("employeeID", strPrsnlID);
            string strReturnValue = "";
            if (findResultList.Length == 0) // display name never used, so take this one
            {
                strReturnValue = "";
            }
            else if (findResultList.Length == 1) // If a metaverse entry is found with the specified commonName, check if this is the entry that is being processed
            {
                MVEntry mvEntryFound = findResultList[0];
                strReturnValue = mvEntryFound["displayName"].Value;
            }
            return strReturnValue;
        }
        //Release 5 Lilac

        public static string ConstructUniqueCommonName(CSEntry csentry, MVEntry mventry)
        {
            //
            // Unique CN is constructed by comapring the MV cn values.
            //
            string defaultCN = "";
            string commonName = "";
            string sSource, sLog, sEvent;

            if (csentry["ANGLCZD_LAST_NM"].IsPresent)
                defaultCN = csentry["ANGLCZD_LAST_NM"].Value;
            if (csentry["ANGLCZD_FIRST_NM"].IsPresent)
                defaultCN = defaultCN.Trim() + " " + csentry["ANGLCZD_FIRST_NM"].Value;
            if (csentry["ANGLCZD_MDL_NM"].IsPresent)
                defaultCN = defaultCN.Trim() + " " + csentry["ANGLCZD_MDL_NM"].Value;

            //If CN cannot be build based on ANGLICZED values
            if (defaultCN.Equals(""))
            {
                if (csentry["LST_NM"].IsPresent)
                    defaultCN = csentry["LST_NM"].Value;
                if (csentry["FRST_NM"].IsPresent)
                    defaultCN = defaultCN.Trim() + " " + csentry["FRST_NM"].Value;
                if (csentry["MDL_NM"].IsPresent)
                    defaultCN = defaultCN.Trim() + " " + csentry["MDL_NM"].Value;
            }

            int xCount = 0;
            bool uniqueCN = false;

            while (!uniqueCN)
            {
                switch (xCount)
                {
                    case 0:
                        commonName = defaultCN.ToUpper().Trim();
                        break;
                    default:
                        commonName = defaultCN.ToUpper().Trim() + " X" + xCount;
                        break;
                }

                xCount++;

                MVEntry[] findResultList = null;
                try
                {
                    //CN cannot be null, throw an excption
                    if (!commonName.Equals(""))
                    {
                        findResultList = Utils.FindMVEntries("cn", commonName);
                    }
                    else
                    {
                        throw new UnexpectedDataException();
                    }
                    if (findResultList.Length == 0) // display name never used, so take this one
                    {
                        return commonName;
                    }
                    else if (findResultList.Length == 1) // If a metaverse entry is found with the specified commonName, check if this is the entry that is being processed
                    {
                        MVEntry mvEntryFound = findResultList[0];
                        if (mvEntryFound.Equals(mventry))        // Yes this is the same entry
                            return commonName;
                    }
                }
                catch (UnexpectedDataException unex)
                {
                    //CN cannot be null, exception thrown is captured to a Event Log
                    sSource = "SAD MA";
                    sLog = "Application";
                    sEvent = csentry["PRSNL_NBR"].Value + " - CN is null";

                    if (!EventLog.SourceExists(sSource))
                        EventLog.CreateEventSource(sSource, sLog);

                    EventLog.WriteEntry(sSource, sEvent, EventLogEntryType.Error, 8101);

                    throw unex;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            return defaultCN;
        }

        public Hashtable LoadAFConfig(string filename)
        {
            //
            // Initializing AD config file, any new PArent Tag in the config means code change / addition to this section 
            //

            XmlTextReader xmlReader = new XmlTextReader("C:\\Program Files\\Microsoft Identity Integration Server\\Extensions\\" + filename);
            // Read the line of the xml file
            Hashtable primaryhash = new Hashtable();

            while (xmlReader.ReadToFollowing("PARENT"))
            {
                Hashtable valhash = new Hashtable();
                if (xmlReader.HasAttributes)
                {
                    for (int i = 0; i < xmlReader.AttributeCount; i++)
                    {
                        xmlReader.MoveToAttribute(i);
                        primaryhash.Add(xmlReader.Value, valhash);
                    }
                }
                if (xmlReader.ReadToFollowing("PATH"))
                {
                    xmlReader.Read();
                    string path = xmlReader.Value;
                    valhash.Add("PATH", path);
                }

                if (xmlReader.ReadToFollowing("UPN"))
                {
                    xmlReader.Read();
                    string upn = xmlReader.Value;
                    valhash.Add("UPN", upn);
                }
                if (xmlReader.ReadToFollowing("DOMAIN"))
                {
                    xmlReader.Read();
                    string domain = xmlReader.Value;
                    valhash.Add("DOMAIN", domain);
                }
                //Release 5 Lilac
                if (xmlReader.ReadToFollowing("LOGINSCRIPT"))
                {
                    xmlReader.Read();
                    string loginscript = xmlReader.Value;
                    valhash.Add("LOGINSCRIPT", loginscript);
                }
                if (xmlReader.ReadToFollowing("EMAILTEMPLATE"))
                {
                    xmlReader.Read();
                    string emailtemplate = xmlReader.Value;
                    valhash.Add("EMAILTEMPLATE", emailtemplate);
                }
                //Release 5 Lilac

                if (xmlReader.ReadToFollowing("SIPHOMESERVER"))
                {
                    xmlReader.Read();
                    string domain = xmlReader.Value;
                    valhash.Add("SIPHOMESERVER", domain);
                }
                if (xmlReader.ReadToFollowing("PERSONNELAREA"))
                {
                    ArrayList parray = new ArrayList();
                    XmlReader tempxmlReader = (XmlReader)xmlReader.ReadSubtree();
                    while (tempxmlReader.ReadToFollowing("CODE"))
                    {
                        tempxmlReader.Read();
                        string pcode = tempxmlReader.Value;
                        parray.Add(pcode);
                    }
                    valhash.Add("PERSONNELAREA", parray);
                }

                if (xmlReader.ReadToFollowing("CONSTITUENT"))
                {
                    ArrayList etypearray = new ArrayList();
                    XmlReader tempxmlReader = (XmlReader)xmlReader.ReadSubtree();
                    while (tempxmlReader.ReadToFollowing("EMPLY_GRP"))
                    {
                        tempxmlReader.Read();
                        string etype = tempxmlReader.Value;
                        etypearray.Add(etype.ToUpper());
                    }
                    valhash.Add("CONSTITUENT", etypearray);
                }
               
            }
            return primaryhash;
        }

        public void setUserVariables(string paccode, string employeeType)
        {
            //
            // Initializing the variable necessary to build a AD account from the already initialized AD config file in a Hashtable
            //

            foreach (DictionaryEntry de in afvalhash)
            {
                Hashtable afconfig = (Hashtable)de.Value;
                ArrayList listarea = (ArrayList)afconfig["PERSONNELAREA"];
                ArrayList listtype = (ArrayList)afconfig["CONSTITUENT"];
                publicOu = null;
                domain = null;
                upn = null;
                sipHomeServer = null;

                if (listarea.Contains(paccode) && listtype.Contains(employeeType.ToUpper()))
                {
                    publicOu = afconfig["PATH"].ToString();
                    domain = afconfig["DOMAIN"].ToString().ToUpper();
                    upn = afconfig["UPN"].ToString();
                    sipHomeServer = afconfig["SIPHOMESERVER"].ToString();
                    emailtemplate = afconfig["EMAILTEMPLATE"].ToString();  //Release 5 Lilac - Setting EMAILTEMPLATE value to emailtemplate
                    break;
                }
            }
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                           